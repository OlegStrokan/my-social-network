{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileInfo","profile","className","s","img","src","alt","descriptionBlock","photos","large","fullName","Preloader","Post","item","message","likesCount","Textarea","FormControl","maxLength10","maxLengthCreator","minLength2","minLengthCreator","AddNewPostForm","onSubmit","handleSubmit","Field","name","component","placeholder","validate","required","reduxForm","form","MyPosts","React","memo","console","log","postsElements","posts","map","p","postsBlock","bgColor","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/3.cc6d9d68.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"ProfileInfo_img__1lpBU\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgColor\":\"MyPosts_bgColor__3EpKJ\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import {React, useState, useEffect} from 'react'\n\n\nconst ProfileStatus = (props) => {\n\n    let [editMode, setEditMode] = useState(false)\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    },[props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n    return <div>\n        {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>Status: {props.status || '-----'}</span>\n            </div>}\n        {editMode &&\n        <div>\n            <br/>\n                <input autoFocus={true}\n                onBlur={deactivateEditMode}\n                onChange={onStatusChange}\n                value={status}/>\n            </div>}\n    </div>\n}\n\nexport default ProfileStatus","import s from \"./ProfileInfo.module.css\";\nimport React from \"react\";\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from './ProfileStatus'\n\nconst ProfileInfo = ({profile,status, updateStatus}) => {\n    if (!profile){\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.img}>\n                <img src=\"https://i.imgur.com/ikJDyFT.jpg\" alt=\"main-img\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large}/>\n              <div>FullName: {profile.fullName}</div>\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo","import React from 'react'\nimport s from './Post.module.css'\n\nconst Post = (props) => {\n    return (\n        <div className={s.item}>\n            <img src=\"https://movie4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg\"/>\n            <div>\n                <span>{props.message}</span>\n                <span>{props.likesCount} likes</span>\n            </div>\n        </div>\n    )\n}\n\nexport default Post","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post'\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {FormControl} from '../../common/FormsControl/FormsControl'\n\nconst Textarea = FormControl(\"textarea\")\n\nlet maxLength10 = maxLengthCreator(10)\nlet minLength2 = minLengthCreator(2)\n\nlet AddNewPostForm = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field name=\"newPostText\" component={Textarea}\n                   placeholder=\"Enter your post message\"\n                   validate={[required, maxLength10, minLength2]}/>\n        </div>\n        <button>Add Post</button>\n    </form>;\n}\n\nAddNewPostForm = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\nconst MyPosts = React.memo((props) => {\n    console.log('render')\n    const postsElements = props.posts\n        .map((p) => <Post message={p.message} likesCount={p.likesCount}/>)\n\n\n    const onAddPost = (values) => {\n        props.addPost(values.newPostText)\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <div className={s.bgColor}>\n                <h3>My post</h3>\n                <AddNewPostForm onSubmit={onAddPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n})\n\n\nexport default MyPosts","import React from \"react\";\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\nexport default MyPostsContainer","import React from \"react\";\nimport s from './Profile.module.css';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {Redirect} from \"react-router-dom\";\n\n\nconst Profile = (props) => {\n    return <div>\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n        <MyPostsContainer/>\n    </div>\n}\n\nexport default Profile","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {getStatus, getUserProfile, updateStatus} from '../../redux/profile-reducer';\nimport {withRouter} from 'react-router-dom'\nimport {compose} from \"redux\";\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.authorizedUserId\n            if (!userId){\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getStatus(userId)\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\n\nexport default compose(withRouter,\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}))(ProfileContainer)\n\n"],"sourceRoot":""}